Description: > 
  Server configuration and deployed for WebApp 

Parameters:

  EnvironmentName:
    Description: Environment Name that will be prefixed to resource name
    Type: String

  MachineImageID:
    Description: Machine Image ID
    Type: String

  EC2InstanceType:
    Description: EC2 Instance Type
    Type: String

Resources:

  WebAppEc2AssumeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        !Sub ${EnvironmentName}-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"


  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AmazonS3ReadOnlyAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - arn:aws:s3:::udacityproject-udagram-webapp
              - arn:aws:s3:::udacityproject-udagram-webapp/*
      Roles:
        - Ref: WebAppEc2AssumeRole

  WebAppEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref WebAppEc2AssumeRole


  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
        - !Ref WebAppTargetGroup
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB


  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install python3-pip apache2 awscli -y
          systemctl start apache2.service
          pip3 install --upgrade awscli
          cd /var/www/html
          aws s3 cp s3://udacityproject-udagram-webapp/index.html /var/www/html/index.html
      ImageId: !Sub "${MachineImageID}"
      IamInstanceProfile: !Ref WebAppEc2InstanceProfile
      #KeyName: UdacityProject_key
      SecurityGroups:
        - !Ref WebServerSecGroup
      InstanceType: !Sub "${EC2InstanceType}"
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'


  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - Ref: LBSecGroup

  Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
        LoadBalancerArn:
          Ref: WebAppLB
        Port: '80'
        Protocol: HTTP

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
          - Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
          - Field: path-pattern
            Values: [ / ]
        ListenerArn: !Ref 'Listener'
        Priority: 1

Outputs:
  LoadBalancer:
    Description: Reference to created LB
    Value: !Ref WebAppLB
    Export:
      Name: !Sub ${EnvironmentName}-LB


  WebAppLBDNSName:
    Description: DNS name or Public URL of the Load Balancer
    Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ] ]
    Export:
      Name: !Sub ${EnvironmentName}-LB-DNSName
